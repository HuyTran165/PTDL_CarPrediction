import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os
from sklearn.ensemble import RandomForestRegressor

# Dictionary definitions for categorical features
# Brand dictionary
brand_dic = {'Audi': 0, 'BMW': 1, 'Mercedes-Benz': 2, 'Mitsubishi': 3, 'Renault': 4, 'Toyota': 5, 'Volkswagen': 6}

# Body dictionary
body_dic = {'crossover': 0, 'hatch': 1, 'other': 2, 'sedan': 3, 'vagon': 4, 'van': 5}

# Engine type dictionary
engine_type_dic = {'Diesel': 0, 'Gas': 1, 'Other': 2, 'Petrol': 3}

# Registration dictionary
registration_dic = {'no': 0, 'yes': 1}

# Model dictionary
model_dic = {'1 Series': 0, '100': 1, '11': 2, '116': 3, '118': 4, '120': 5, '19': 6, '190': 7, '200': 8, '210': 9, '220': 10,
'230': 11, '25': 12, '250': 13, '300': 14, '316': 15, '318': 16, '320': 17, '323': 18, '325': 19, '328': 20, '330': 21,
'335': 22, '4 Series Gran Coupe': 23, '428': 24, '4Runner': 25, '5 Series': 26, '5 Series GT': 27, '520': 28, '523': 29,
'524': 30, '525': 31, '528': 32, '530': 33, '535': 34, '540': 35, '545': 36, '550': 37, '6 Series Gran Coupe': 38,
'630': 39, '640': 40, '645': 41, '650': 42, '730': 43, '735': 44, '740': 45, '745': 46, '750': 47, '760': 48, '80': 49,
'9': 50, '90': 51, 'A 140': 52, 'A 150': 53, 'A 170': 54, 'A 180': 55, 'A1': 56, 'A3': 57, 'A4': 58, 'A4 Allroad': 59,
'A5': 60, 'A6': 61, 'A6 Allroad': 62, 'A7': 63, 'A8': 64, 'ASX': 65, 'Amarok': 66, 'Auris': 67, 'Avalon': 68,
'Avensis': 69, 'Aygo': 70, 'B 170': 71, 'B 180': 72, 'B 200': 73, 'Beetle': 74, 'Bora': 75, 'C-Class': 76, 'CL 180': 77,
'CL 500': 78, 'CL 55 AMG': 79, 'CL 550': 80, 'CL 63 AMG': 81, 'CLA 200': 82, 'CLA 220': 83, 'CLA-Class': 84,
'CLC 180': 85, 'CLC 200': 86, 'CLK 200': 87, 'CLK 220': 88, 'CLK 230': 89, 'CLK 240': 90, 'CLK 280': 91, 'CLK 320': 92,
'CLK 430': 93, 'CLS 350': 94, 'CLS 400': 95, 'CLS 500': 96, 'CLS 63 AMG': 97, 'Caddy': 98, 'Camry': 99, 'Captur': 100,
'Caravelle': 101, 'Carina': 102, 'Carisma': 103, 'Celica': 104, 'Clio': 105, 'Colt': 106, 'Corolla': 107,
'Corolla Verso': 108, 'Cross Touran': 109, 'Dokker': 110, 'Duster': 111, 'E-Class': 112, 'Eclipse': 113, 'Eos': 114,
'Espace': 115, 'FJ Cruiser': 116, 'Fluence': 117, 'Fortuner': 118, 'G 320': 119, 'G 350': 120, 'G 500': 121,
'G 55 AMG': 122, 'G 63 AMG': 123, 'GL 320': 124, 'GL 350': 125, 'GL 420': 126, 'GL 450': 127, 'GL 500': 128,
'GL 550': 129, 'GLC-Class': 130, 'GLE-Class': 131, 'GLK 220': 132, 'GLK 300': 133, 'GLS 350': 134, 'GLS 400': 135,
'Galant': 136, 'Golf GTI': 137, 'Golf II': 138, 'Golf III': 139, 'Golf IV': 140, 'Golf Plus': 141, 'Golf V': 142,
'Golf VI': 143, 'Golf VII': 144, 'Golf Variant': 145, 'Grand Scenic': 146, 'Grandis': 147, 'Hiace': 148,
'Highlander': 149, 'Hilux': 150, 'I3': 151, 'IQ': 152, 'Jetta': 153, 'Kangoo': 154, 'Koleos': 155, 'L 200': 156,
'LT': 157, 'Laguna': 158, 'Lancer': 159, 'Lancer Evolution': 160, 'Lancer X': 161, 'Lancer X Sportback': 162,
'Land Cruiser 100': 163, 'Land Cruiser 105': 164, 'Land Cruiser 200': 165, 'Land Cruiser 76': 166, 'Land Cruiser 80': 167,
'Land Cruiser Prado': 168, 'Latitude': 169, 'Logan': 170, 'Lupo': 171, 'M5': 172, 'M6': 173, 'MB': 174, 'ML 250': 175,
'ML 270': 176, 'ML 280': 177, 'ML 320': 178, 'ML 350': 179, 'ML 400': 180, 'ML 430': 181, 'ML 500': 182, 'ML 550': 183,
'ML 63 AMG': 184, 'Master': 185, 'Matrix': 186, 'Megane': 187, 'Modus': 188, 'Multivan': 189, 'New Beetle': 190,
'Outlander': 191, 'Outlander XL': 192, 'Pajero': 193, 'Pajero Pinin': 194, 'Pajero Sport': 195, 'Pajero Wagon': 196,
'Passat B3': 197, 'Passat B4': 198, 'Passat B5': 199, 'Passat B6': 200, 'Passat B7': 201, 'Passat B8': 202,
'Passat CC': 203, 'Phaeton': 204, 'Pointer': 205, 'Polo': 206, 'Previa': 207, 'Prius': 208, 'Q3': 209, 'Q5': 210,
'Q7': 211, 'R 320': 212, 'R8': 213, 'Rav 4': 214, 'S 140': 215, 'S 250': 216, 'S 300': 217, 'S 320': 218, 'S 350': 219,
'S 400': 220, 'S 430': 221, 'S 500': 222, 'S 550': 223, 'S 600': 224, 'S 63 AMG': 225, 'S 65 AMG': 226, 'S4': 227,
'S5': 228, 'S8': 229, 'SL 500 (550)': 230, 'SL 55 AMG': 231, 'SLK 200': 232, 'SLK 350': 233, 'Sandero': 234,
'Sandero StepWay': 235, 'Scenic': 236, 'Scion': 237, 'Scirocco': 238, 'Sequoia': 239, 'Sharan': 240, 'Sienna': 241,
'Smart': 242, 'Space Star': 243, 'Space Wagon': 244, 'Sprinter 208': 245, 'Sprinter 210': 246, 'Sprinter 211': 247,
'Sprinter 212': 248, 'Sprinter 213': 249, 'Sprinter 311': 250, 'Sprinter 312': 251, 'Sprinter 313': 252,
'Sprinter 315': 253, 'Sprinter 316': 254, 'Sprinter 318': 255, 'Sprinter 319': 256, 'Symbol': 257, 'Syncro': 258,
'T3 (Transporter)': 259, 'T4 (Transporter)': 260, 'T4 (Transporter) ': 261, 'T5 (Transporter)': 262,
'T5 (Transporter) ': 263, 'T6 (Transporter)': 264, 'T6 (Transporter) ': 265, 'TT': 266, 'Tacoma': 267, 'Tiguan': 268,
'Touareg': 269, 'Touran': 270, 'Trafic': 271, 'Tundra': 272, 'Up': 273, 'V 250': 274, 'Vaneo': 275, 'Vento': 276,
'Venza': 277, 'Viano': 278, 'Virage': 279, 'Vista': 280, 'Vito': 281, 'X1': 282, 'X3': 283, 'X5': 284, 'X5 M': 285,
'X6': 286, 'X6 M': 287, 'Yaris': 288, 'Z3': 289, 'Z4': 290}

# Lists of categorical labels
brand_list = ['Audi', 'BMW', 'Mercedes-Benz', 'Mitsubishi', 'Renault', 'Toyota', 'Volkswagen']
body_list = ['crossover', 'hatch', 'other', 'sedan', 'vagon', 'van']
engine_type_list = ['Diesel', 'Gas', 'Other', 'Petrol']
registration_list = ['yes', 'no']

# Set page configuration
st.set_page_config(
    page_title='Used Car Price Predictor',
    page_icon='üöò',
    layout='wide',
    initial_sidebar_state='expanded'
)

# Custom CSS for improved UI
st.markdown("""
<style>
    /* Main styles */
    .main {
        background-color: #f8f9fa;
        padding: 20px;
    }
    
    /* Header styles */
    .header-container {
        background: linear-gradient(135deg, #051937, #004d7a);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 30px;
        text-align: center;
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
    }
    
    .header-title {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .header-subtitle {
        font-size: 1.2rem;
        opacity: 0.9;
    }
    
    /* Card styles */
    .card {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }
    
    .card-header {
        border-bottom: 2px solid #e9ecef;
        padding-bottom: 10px;
        margin-bottom: 15px;
        font-weight: 600;
        color: #0a3d62;
    }
    
    /* Form styles */
    .stButton>button {
        background-color: #0a3d62;
        color: white;
        font-weight: bold;
        border-radius: 8px;
        padding: 12px 24px;
        border: none;
        width: 100%;
        transition: all 0.3s;
    }
    
    .stButton>button:hover {
        background-color: #0c2d48;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    /* Result box styles */
    .result-container {
        background: linear-gradient(135deg, #00b09b, #96c93d);
        border-radius: 15px;
        padding: 30px;
        text-align: center;
        color: white;
        box-shadow: 0 8px 16px rgba(0,0,0,0.15);
    }
    
    .price-value {
        font-size: 3.5rem;
        font-weight: 700;
        margin: 15px 0;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Footer styles */
    .footer {
        text-align: center;
        margin-top: 50px;
        color: #6c757d;
        font-size: 0.9rem;
    }
    
    /* Responsive adjustments */
    @media screen and (max-width: 768px) {
        .header-title {
            font-size: 2rem;
        }
        
        .price-value {
            font-size: 2.5rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Load the dataset
@st.cache_data
def load_data():
    return pd.read_csv('D:\DOWNLOAD\CAR_ANYLIST\Car_Prices\Car_cleaned_with_Model.csv')

# Load the model
@st.cache_resource
def load_model():
    return joblib.load("D:/DOWNLOAD/CAR_ANYLIST/Car_Prices/rf1_base_rf.pkl")

# Function to find models for a specific brand
def find_model(brand, car_data):
    model = car_data[car_data['Brand'] == brand]['Model']
    return list(model)

# Main application function
def main():
    # Header section
    st.markdown("""
    <div class="header-container">
        <div class="header-title">üöò Used Car Price Predictor</div>
        <div class="header-subtitle">Nh·∫≠n ∆∞·ªõc t√≠nh gi√° tr·ªã th·ªã tr∆∞·ªùng ch√≠nh x√°c cho xe ƒë√£ qua s·ª≠ d·ª•ng c·ªßa b·∫°n</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Loading data and model
    with st.spinner('üîÑ ƒêang kh·ªüi t·∫°o h·ªá th·ªëng...'):
        car = load_data()
        model = load_model()
    
    # Create sidebar for app navigation
    with st.sidebar:
        st.image("D:\DOWNLOAD\CAR_ANYLIST\Data_Raw\car.jpg", width=100)
        st.title("Trang Ch·ª¶")
        pages = ["Predict Price", "How It Works", "About"]
        choice = st.radio("Go to", pages)
    
    # Prediction page
    if choice == "Predict Price":
        # Create tabs for input organization
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            st.markdown('<div class="card-header">üìã Th√¥ng tin xe</div>', unsafe_allow_html=True)
            
            brand_inp = st.selectbox(
                "H√£ng Xe",
                options=brand_list,
                help="Ch·ªçn nh√† s·∫£n xu·∫•t xe"
            )
            
            # Model selection based on brand
            if brand_inp == 'Audi':
                model_options = find_model('Audi', car)
                model_inp = st.selectbox('Audi Model', options=model_options)
            elif brand_inp == 'Mitsubishi':
                model_options = find_model('Mitsubishi', car)
                model_inp = st.selectbox('Mitsubishi Model', options=model_options)
            elif brand_inp == 'Renault':   
                model_options = find_model('Renault', car)
                model_inp = st.selectbox('Renault Model', options=model_options)
            elif brand_inp == 'Toyota':
                model_options = find_model('Toyota', car)
                model_inp = st.selectbox('Toyota Model', options=model_options)
            elif brand_inp == 'BMW':
                model_options = find_model('BMW', car)
                model_inp = st.selectbox('BMW Model', options=model_options)
            elif brand_inp == 'Mercedes-Benz':
                model_options = find_model('Mercedes-Benz', car)
                model_inp = st.selectbox('Mercedes-Benz Model', options=model_options)
            elif brand_inp == 'Volkswagen':
                model_options = find_model('Volkswagen', car)
                model_inp = st.selectbox('Volkswagen Model', options=model_options)
            
            year = st.slider(
                "NƒÉm S·∫£n Xu·∫•t",
                min_value=1980,
                max_value=2020,
                value=2010,
                help="NƒÉm s·∫£n xu·∫•t xe"
            )
            
            body_type = st.selectbox(
                "Ki·ªÉu Xe",
                options=body_list,
                help="Ki·ªÉu d√°ng th√¢n xe"
            )
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            st.markdown('<div class="card-header">‚öôÔ∏è Th√¥ng s·ªë k·ªπ thu·∫≠t</div>', unsafe_allow_html=True)
            
            mileage = st.number_input(
                "Mileage (D·∫∑m)",
                min_value=0,
                value=50000,
                step=1000,
                help="T·ªïng qu√£ng ƒë∆∞·ªùng xe ƒë√£ ƒëi ƒë∆∞·ª£c"
            )
            
            engineV = st.number_input(
                "Dung T√≠ch ƒê·ªông C∆° (L)",
                min_value=0.5,
                max_value=6.4,
                value=2.0,
                step=0.1,
                help="Th·ªÉ t√≠ch c·ªßa ƒë·ªông c∆° √¥ t√¥ t√≠nh b·∫±ng l√≠t"
            )
            
            engine_type = st.selectbox(
                "Lo·∫°i Nhi√™n Li·ªáu",
                options=engine_type_list,
                help="Lo·∫°i nhi√™n li·ªáu xe s·ª≠ d·ª•ng"
            )
            
            regis = st.selectbox(
                "Tr·∫°ng th√°i ƒëƒÉng k√Ω",
                options=registration_list,
                help="Chi·∫øc xe ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω ch∆∞a?"
            )
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Convert inputs to numerical values for prediction
        brand = brand_dic[brand_inp]
        body = body_dic[body_type]
        engine = engine_type_dic[engine_type]
        registration = registration_dic[regis]
        model_num = model_dic[model_inp]
        
        # Create prediction button
        st.markdown('<div style="padding: 20px 0;">', unsafe_allow_html=True)
        predict_pressed = st.button('T√çNH TO√ÅN GI√Å ∆Ø·ªöC T√çNH', use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Make prediction when button is pressed
        if predict_pressed:
            try:
                # Prepare input array
                input_array = np.array([[mileage, engineV, year, brand, body, engine, registration, model_num]])
                
                # Make prediction
                with st.spinner("üßÆƒêang t√≠nh gi√°..."):
                    prediction = model.predict(input_array)
                    price = round(float(prediction[0]), 2)
                
                if price < 0:
                    st.error("‚ö†Ô∏èGi√° t√≠nh to√°n l√† s·ªë √¢m. ƒêi·ªÅu n√†y cho th·∫•y s·ª± k·∫øt h·ª£p ƒë·∫ßu v√†o b·∫•t th∆∞·ªùng. Vui l√≤ng x√°c minh ƒë·∫ßu v√†o c·ªßa b·∫°n.")
                else:
                    # Display prediction result
                    st.markdown(f"""
                    <div class="result-container">
                        <h3>Gi√° ∆∞·ªõc t√≠nh</h3>
                        <div class="price-value">${price:,.2f}</div>
                        <p>D·ª±a tr√™n c√°c th√¥ng s·ªë k·ªπ thu·∫≠t b·∫°n cung c·∫•p</p>
                    </div>
                    """, unsafe_allow_html=True)
                    st.balloons()
                    
                    # Display comparable cars
                    st.markdown('<div class="card" style="margin-top: 30px;">', unsafe_allow_html=True)
                    st.markdown('<div class="card-header">üîç B·ªëi c·∫£nh th·ªã tr∆∞·ªùng</div>', unsafe_allow_html=True)
                    st.write(f"∆Ø·ªõc t√≠nh n√†y ƒë·ªãnh v·ªã c·ªßa b·∫°n {year} {brand_inp} {model_inp} tr√™n th·ªã tr∆∞·ªùng nh∆∞ sau:")
                    
                    price_range = [price * 0.9, price * 1.1]
                    st.write(f"‚Ä¢ Nh·ªØng chi·∫øc xe t∆∞∆°ng t·ª± th∆∞·ªùng ƒë∆∞·ª£c b√°n v·ªõi gi√° ${price_range[0]:,.2f} v√† ${price_range[1]:,.2f}")
                    st.write(f"‚Ä¢ S·ªë d·∫∑m c·ªßa {mileage} d·∫∑m l√† m·ªôt y·∫øu t·ªë quan tr·ªçng trong ƒë·ªãnh gi√° n√†y")
                    st.write(f"‚Ä¢ {year} c√°c m√¥ h√¨nh v·ªõi {engineV}L {engine_type} ƒë·ªông c∆° ƒë√£ cho th·∫•y nhu c·∫ßu ·ªïn ƒë·ªãnh")
                    st.markdown('</div>', unsafe_allow_html=True)
                    
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
                st.write("Vui l√≤ng ki·ªÉm tra gi√° tr·ªã ƒë·∫ßu v√†o c·ªßa b·∫°n v√† th·ª≠ l·∫°i.")
    
    # How It Works page
    elif choice == "How It Works":
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<div class="card-header">üîç D·ª± ƒëo√°n c·ªßa ch√∫ng t√¥i ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o</div>', unsafe_allow_html=True)
        st.write("""
        C√¥ng c·ª• D·ª± ƒëo√°n gi√° xe c·ªßa ch√∫ng t√¥i s·ª≠ d·ª•ng thu·∫≠t to√°n h·ªçc m√°y tinh vi c√≥ t√™n l√† Random Forest ƒë·ªÉ ∆∞·ªõc t√≠nh gi√° tr·ªã th·ªã tr∆∞·ªùng c·ªßa xe ƒë√£ qua s·ª≠ d·ª•ng. C√°ch th·ª©c ho·∫°t ƒë·ªông nh∆∞ sau:

1. **Thu th·∫≠p d·ªØ li·ªáu**: Ch√∫ng t√¥i ƒë√£ ph√¢n t√≠ch h√†ng ngh√¨n danh s√°ch xe ƒë√£ qua s·ª≠ d·ª•ng ƒë·ªÉ x√¢y d·ª±ng m√¥ h√¨nh d·ª± ƒëo√°n c·ªßa m√¨nh.

2. **X·ª≠ l√Ω t√≠nh nƒÉng**: H·ªá th·ªëng xem x√©t nhi·ªÅu y·∫øu t·ªë ·∫£nh h∆∞·ªüng ƒë·∫øn gi√° tr·ªã c·ªßa xe:
- Th∆∞∆°ng hi·ªáu v√† m·∫´u xe c·ª• th·ªÉ
- NƒÉm s·∫£n xu·∫•t
- S·ªë km ƒë√£ ƒëi (xe ƒë√£ ƒëi ƒë∆∞·ª£c bao nhi√™u d·∫∑m)
- Th·ªÉ t√≠ch ƒë·ªông c∆° v√† lo·∫°i nhi√™n li·ªáu
- Ki·ªÉu th√¢n xe
- T√¨nh tr·∫°ng ƒëƒÉng k√Ω

3. **Thu·∫≠t to√°n d·ª± ƒëo√°n**: M√¥ h√¨nh Random Forest c·ªßa ch√∫ng t√¥i ph√¢n t√≠ch c√°c y·∫øu t·ªë n√†y c√πng nhau ƒë·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã th·ªã tr∆∞·ªùng c√≥ kh·∫£ nƒÉng x·∫£y ra nh·∫•t.

4. **K·∫øt qu·∫£**: B·∫°n nh·∫≠n ƒë∆∞·ª£c ∆∞·ªõc t√≠nh ch√≠nh x√°c d·ª±a tr√™n ƒëi·ªÅu ki·ªán th·ªã tr∆∞·ªùng hi·ªán t·∫°i v√† d·ªØ li·ªáu b√°n h√†ng l·ªãch s·ª≠.
        """)
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<div class="card-header">üí° M·∫πo ƒë·ªÉ d·ª± ƒëo√°n ch√≠nh x√°c</div>', unsafe_allow_html=True)
        st.write("""
        ƒê·ªÉ c√≥ ƒë∆∞·ª£c ∆∞·ªõc t√≠nh ch√≠nh x√°c nh·∫•t c√≥ th·ªÉ:

- Cung c·∫•p th√¥ng tin v·ªÅ qu√£ng ƒë∆∞·ªùng ƒëi ƒë∆∞·ª£c ch√≠nh x√°c
- Ch·ªçn ƒë√∫ng m·∫´u xe c·ªßa b·∫°n
- Ch√≠nh x√°c v·ªÅ th√¥ng s·ªë k·ªπ thu·∫≠t c·ªßa ƒë·ªông c∆°
- C√¢n nh·∫Øc r·∫±ng c√°c y·∫øu t·ªë nh∆∞ t√¨nh tr·∫°ng xe, l·ªãch s·ª≠ tai n·∫°n v√† c√°c t√≠nh nƒÉng b·ªï sung kh√¥ng ƒë∆∞·ª£c bao g·ªìm trong ∆∞·ªõc t√≠nh c∆° b·∫£n n√†y
        """)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # About page
    elif choice == "About":
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.markdown('<div class="card-header">‚ÑπÔ∏è Gi·ªõi thi·ªáu v·ªÅ c√¥ng c·ª• n√†y</div>', unsafe_allow_html=True)
        st.write("""
        C√¥ng c·ª• D·ª± ƒëo√°n gi√° xe n√†y ƒë∆∞·ª£c ph√°t tri·ªÉn ƒë·ªÉ gi√∫p ch·ªß xe, ng∆∞·ªùi mua v√† ng∆∞·ªùi b√°n xe c√≥ ƒë∆∞·ª£c ∆∞·ªõc t√≠nh ƒë√°ng tin c·∫≠y v·ªÅ gi√° tr·ªã xe ƒë√£ qua s·ª≠ d·ª•ng.

**M·ª•c ƒë√≠ch**:
- Gi√∫p ng∆∞·ªùi b√°n ƒë·∫∑t gi√° ch√†o b√°n h·ª£p l√Ω
- H·ªó tr·ª£ ng∆∞·ªùi mua ƒë√°nh gi√° xem gi√° ni√™m y·∫øt c√≥ h·ª£p l√Ω kh√¥ng
- H·ªó tr·ª£ ƒë√°nh gi√° gi√° tr·ªã b·∫£o hi·ªÉm
- H·ªó tr·ª£ l·∫≠p k·∫ø ho·∫°ch t√†i ch√≠nh li√™n quan ƒë·∫øn t√†i s·∫£n xe

**L∆∞u √Ω quan tr·ªçng**: M·∫∑c d√π d·ª± ƒëo√°n c·ªßa ch√∫ng t√¥i d·ª±a tr√™n ph√¢n t√≠ch d·ªØ li·ªáu m·ªü r·ªông, gi√° tr·ªã th·ªã tr∆∞·ªùng th·ª±c t·∫ø c·ªßa m·ªôt chi·∫øc xe c·ª• th·ªÉ c√≥ th·ªÉ thay ƒë·ªïi t√πy thu·ªôc v√†o c√°c y·∫øu t·ªë b·ªï sung nh∆∞:
- T√¨nh tr·∫°ng v·∫≠t l√Ω th·ª±c t·∫ø
- L·ªãch s·ª≠ d·ªãch v·ª•
- Nhu c·∫ßu th·ªã tr∆∞·ªùng ƒë·ªãa ph∆∞∆°ng
- Bi·∫øn ƒë·ªông theo m√πa
- C√°c t√≠nh nƒÉng ho·∫∑c s·ª≠a ƒë·ªïi ƒë·∫∑c bi·ªát
- M√†u s·∫Øc v√† t√¨nh tr·∫°ng th·∫©m m·ªπ

Lu√¥n tham kh·∫£o √Ω ki·∫øn ‚Äã‚Äãc·ªßa m·ªôt ng∆∞·ªùi th·∫©m ƒë·ªãnh chuy√™n nghi·ªáp ƒë·ªÉ c√≥ ƒë·ªãnh gi√° d·ª©t kho√°t, ƒë·∫∑c bi·ªát l√† ƒë·ªëi v·ªõi c√°c giao d·ªãch c√≥ gi√° tr·ªã cao ho·∫∑c m·ª•c ƒë√≠ch b·∫£o hi·ªÉm.
        """)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Footer
    st.markdown("""
    <div class="footer">
        <p>¬© C√¥ng c·ª• d·ª± ƒëo√°n gi√° xe nƒÉm 2025 | Kh√¥ng d√†nh cho m·ª•c ƒë√≠ch th∆∞∆°ng m·∫°i | Gi√° tr·ªã ch·ªâ l√† ∆∞·ªõc t√≠nh</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()